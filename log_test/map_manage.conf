# DEBUG是指定rootCategory的log级别门槛
# TESTAppender是输出到日志文件
# 如果有console，日志会在CGI，IDE输出和Linux终端中输出
log4cpp.rootCategory=INFO,TESTAppender

#  -------定义console属性-------  #

# consoleAppender类型:控制台输出
# 控制台输出的log输出的格式是：[%p] %d{%H:%M:%S.%l} (%c): %m%n
log4cpp.appender.console=ConsoleAppender
log4cpp.appender.console.layout=PatternLayout
log4cpp.appender.console.layout.ConversionPattern=[%p] %d{%H:%M:%S.%l} (%c): %m%n

#  -------定义TESTAppender的属性-------  #

# RollingFileAppender类型：输出到回卷文件，即文件到达某个大小的时候产生一个新的文件
# 文件输出到指定的log文件，输出的布局按照格式：[%d{%m-%d %H:%M:%S.%l} - %p] (%c): %m%n
log4cpp.appender.TESTAppender=RollingFileAppender

#当日志文件到达maxFileSize大小时，将会自动滚动，这里是10K
log4cpp.appender.TESTAppender.maxFileSize=10000000

#maxBackupIndex指定可以产生的滚动文件的最大数
log4cpp.appender.TESTAppender.maxBackupIndex=10

# 日志信息输出到的文件路径
log4cpp.appender.TESTAppender.fileName=package.log

# PatternLayout 表示可以灵活指定布局模式
log4cpp.appender.TESTAppender.layout=PatternLayout

#append=true 信息追加到上面指定的日志文件中，false表示将信息覆盖指定文件内容
log4cpp.appender.TESTAppender.append=true
log4cpp.appender.TESTAppender.layout.ConversionPattern=[%d{%Y-%m-%d %H:%M:%S.%l} - %p] (%c): %m%n